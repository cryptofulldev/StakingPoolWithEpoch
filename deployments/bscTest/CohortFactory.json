{
  "address": "0xD638f53162B0e7E918BDDc01695958cDDd0889Ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_actuary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "actuary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_claimAssessor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_cohortStartCapital",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_premiumFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_premiumCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minPremium",
          "type": "uint256"
        }
      ],
      "name": "newCohort",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xda54c123cbf52ac414698386cb3132cbcb84e9dd6c9000b4bb8bbd4206b8bbf3",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0xD638f53162B0e7E918BDDc01695958cDDd0889Ba",
    "transactionIndex": 3,
    "gasUsed": "3366018",
    "logsBloom": "0x
    "blockHash": "0xe6297716282d32138eb03c8f551f48d6a84b2040da56d256c8eb9f640335ed12",
    "transactionHash": "0xda54c123cbf52ac414698386cb3132cbcb84e9dd6c9000b4bb8bbd4206b8bbf3",
    "logs": [],
    "blockNumber": 12565163,
    "cumulativeGasUsed": "3792048",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe9b5D61aAC0fda1d8a5166A1d36204E02E7ab982"
  ],
  "solcInputHash": "fd12d6ddb0742c54ea83ec0f62ccc4ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_actuary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"actuary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cohortStartCapital\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_premiumFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_premiumCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minPremium\",\"type\":\"uint256\"}],\"name\":\"newCohort\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/CohortFactory.sol\":\"CohortFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/Cohort.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./interfaces/IRiskPoolFactory.sol\\\";\\r\\nimport \\\"./interfaces/ICohort.sol\\\";\\r\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\r\\nimport \\\"./interfaces/IPremiumPoolFactory.sol\\\";\\r\\nimport \\\"./interfaces/IPremiumPool.sol\\\";\\r\\nimport \\\"./libraries/TransferHelper.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Cohort is ICohort, ReentrancyGuard {\\r\\n    // It should be okay if Protocol is struct\\r\\n    struct Protocol {\\r\\n        uint256 coverDuration; // Duration of the protocol cover products\\r\\n        address protocolAddress; // Address of that protocol\\r\\n        string name; // protocol name\\r\\n        string productType; // Type of product i.e. Wallet insurance, smart contract bug insurance, etc.\\r\\n        string premiumDescription;\\r\\n        uint16 avgLR; // LR means Loss Ratio, default 1000 = 1\\r\\n        bool exist; // initial true\\r\\n    }\\r\\n\\r\\n    address public factory;\\r\\n    address public claimAssessor;\\r\\n    address public premiumPool;\\r\\n    address public owner;\\r\\n    string public name;\\r\\n    // uint public TVLc;\\r\\n    // uint public combinedRisk;\\r\\n    uint256 public duration;\\r\\n    // uint8 public status;\\r\\n    uint256 public cohortActiveFrom;\\r\\n\\r\\n    // for now we set this as constant\\r\\n    uint256 public immutable COHORT_START_CAPITAL;\\r\\n\\r\\n    mapping(uint16 => Protocol) public getProtocol;\\r\\n    uint16[] private allProtocols;\\r\\n\\r\\n    mapping(uint8 => address) public getRiskPool;\\r\\n    uint8[] private allRiskPools;\\r\\n\\r\\n    // pool => amount => pool capital\\r\\n    mapping(address => uint256) private poolCapital;\\r\\n    uint256 private totalAPRofPools;\\r\\n    uint256 private MAX_INTEGER = type(uint256).max;\\r\\n\\r\\n    event ProtocolCreated(address indexed _cohort, uint16 _protocolIdx);\\r\\n    event PremiumDeposited(address indexed _cohort, uint16 _protocolIdx, uint256 _amount);\\r\\n    event RiskPoolCreated(address indexed _cohort, address indexed _pool);\\r\\n    event StakedInPool(address indexed _staker, address indexed pool, uint256 _amount);\\r\\n    event LeftPool(address indexed _staker, address indexed _pool);\\r\\n    event ClaimPaid(address indexed _claimer, uint256 _protocolIdx, uint256 _amount);\\r\\n    event RiskPoolInitialize(address _pool, uint256 _amount);\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        string memory _name,\\r\\n        address _claimAssessor,\\r\\n        uint256 _cohortStartCapital\\r\\n    ) {\\r\\n        owner = _owner;\\r\\n        name = _name;\\r\\n        COHORT_START_CAPITAL = _cohortStartCapital;\\r\\n        claimAssessor = _claimAssessor;\\r\\n        factory = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyCohortOwner() {\\r\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function allProtocolsLength() external view returns (uint256) {\\r\\n        return allProtocols.length;\\r\\n    }\\r\\n\\r\\n    function allRiskPoolLength() external view returns (uint256) {\\r\\n        return allRiskPools.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev We separated createPremiumPool from constructor to keep light constructor\\r\\n     */\\r\\n    function createPremiumPool(\\r\\n        address _factory,\\r\\n        address _currency,\\r\\n        uint256 _minimum\\r\\n    ) external {\\r\\n        require(msg.sender == factory, \\\"UnoRe: Forbidden\\\");\\r\\n        premiumPool = IPremiumPoolFactory(_factory).newPremiumPool(_currency, _minimum);\\r\\n    }\\r\\n\\r\\n    // This action can be done only by cohort owner\\r\\n    function addProtocol(\\r\\n        string calldata _name,\\r\\n        address _protocolAddress,\\r\\n        string calldata _productType,\\r\\n        string calldata _premiumDescription,\\r\\n        uint256 _coverDuration\\r\\n    ) external onlyCohortOwner {\\r\\n        uint16 lastIdx = allProtocols.length > 0 ? allProtocols[allProtocols.length - 1] + 1 : 0;\\r\\n        allProtocols.push(lastIdx);\\r\\n        getProtocol[lastIdx] = Protocol({\\r\\n            coverDuration: _coverDuration,\\r\\n            protocolAddress: _protocolAddress,\\r\\n            name: _name,\\r\\n            productType: _productType,\\r\\n            premiumDescription: _premiumDescription,\\r\\n            avgLR: 1000, //\\r\\n            exist: true\\r\\n        });\\r\\n\\r\\n        if (duration < _coverDuration) {\\r\\n            duration = _coverDuration;\\r\\n        }\\r\\n        emit ProtocolCreated(address(this), lastIdx);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev create Risk pool from cohort owner\\r\\n     */\\r\\n    function createRiskPool(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address _factory,\\r\\n        address _currency,\\r\\n        uint256 _APR,\\r\\n        uint256 _maxSize\\r\\n    ) external onlyCohortOwner returns (address pool) {\\r\\n        uint256 len = allRiskPools.length;\\r\\n        pool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency, _APR, _maxSize);\\r\\n\\r\\n        uint8 lastIdx = len > 0 ? allRiskPools[len - 1] + 1 : 0;\\r\\n        allRiskPools.push(lastIdx);\\r\\n        getRiskPool[lastIdx] = pool;\\r\\n        totalAPRofPools += _APR;\\r\\n        poolCapital[pool] = MAX_INTEGER;\\r\\n        IRiskPool(pool).epochStart();\\r\\n        emit RiskPoolCreated(address(this), pool);\\r\\n    }\\r\\n\\r\\n    function initialRiskPool(address _pool, uint256 _amount) external nonReentrant onlyCohortOwner {\\r\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\r\\n        require(_pool != address(0), \\\"UnoRe: ZERO Address\\\");\\r\\n        address token = IRiskPool(_pool).currency();\\r\\n        TransferHelper.safeTransferFrom(token, msg.sender, _pool, _amount);\\r\\n        poolCapital[_pool] == MAX_INTEGER ? poolCapital[_pool] = _amount : poolCapital[_pool] += _amount;\\r\\n        IRiskPool(_pool).initialRiskPool(msg.sender, _amount);\\r\\n        _startCohort();\\r\\n        emit RiskPoolInitialize(_pool, _amount);\\r\\n    }\\r\\n\\r\\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external nonReentrant {\\r\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\r\\n        TransferHelper.safeTransferFrom(IPremiumPool(premiumPool).currency(), msg.sender, premiumPool, _amount);\\r\\n        IPremiumPool(premiumPool).depositPremium(_protocolIdx, _amount);\\r\\n        emit PremiumDeposited(address(this), _protocolIdx, _amount);\\r\\n    }\\r\\n\\r\\n    function enterInPool(\\r\\n        address _from,\\r\\n        address _pool,\\r\\n        uint256 _amount\\r\\n    ) external nonReentrant {\\r\\n        // require(cohortActiveFrom == 0, \\\"UnoRe: Staking was Ended\\\");\\r\\n        require(poolCapital[_pool] == MAX_INTEGER || poolCapital[_pool] != 0, \\\"UnoRe: RiskPool not exist\\\");\\r\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\r\\n        uint256 _poolMaxSize = IRiskPool(_pool).maxSize();\\r\\n        uint256 _currentSupply = IERC20(_pool).totalSupply(); // It's Okay using totalSupply here, because there's no withdrawl during staking.\\r\\n        require(_poolMaxSize >= (_amount + _currentSupply), \\\"UnoRe: RiskPool overflow\\\");\\r\\n        address token = IRiskPool(_pool).currency();\\r\\n        TransferHelper.safeTransferFrom(token, _from, _pool, _amount);\\r\\n        \\r\\n        IRiskPool(_pool).enter(_from, _amount);\\r\\n        poolCapital[_pool] == MAX_INTEGER ? poolCapital[_pool] = _amount : poolCapital[_pool] += _amount;\\r\\n\\r\\n        emit StakedInPool(_from, _pool, _amount);\\r\\n    }\\r\\n\\r\\n    function batchImplementForDepositRequest(address _pool) external onlyCohortOwner nonReentrant {\\r\\n        address[] memory requestUserList = IRiskPool(_pool).depositRequestList();\\r\\n        for (uint kk = 0; kk < requestUserList.length; kk++) {\\r\\n            IRiskPool(_pool).updateUserDeposit(requestUserList[kk]);\\r\\n        }\\r\\n        IRiskPool(_pool).updateTotalDeposit();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev for now we assume protocols send premium to cohort smart contract\\r\\n     */\\r\\n    function leaveFromPool(address _to, address _pool) external nonReentrant {\\r\\n        require(cohortActiveFrom != 0 && block.timestamp - cohortActiveFrom > duration, \\\"UnoRe: Forbidden\\\");\\r\\n        require(poolCapital[_pool] != 0 && poolCapital[_pool] != MAX_INTEGER, \\\"UnoRe: RiskPool not exist or empty\\\");\\r\\n        // Withdraw remaining from pool\\r\\n        uint256 amount = IERC20(_pool).balanceOf(_to);\\r\\n        require(amount != 0, \\\"UnoRe: ZERO Value\\\");\\r\\n        // get premium rewards\\r\\n        /**\\r\\n         * @dev It's okay using for loop here, because the max length of pools is 3 at the moment\\r\\n         */\\r\\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\\r\\n            uint16 protocolIdx = allProtocols[ii];\\r\\n            IPremiumPool(premiumPool).setPremiumReward(protocolIdx);\\r\\n            uint256 _pr = premiumReward(_to, _pool, protocolIdx);\\r\\n            IPremiumPool(premiumPool).withdrawPremium(_to, protocolIdx, _pr);\\r\\n        }\\r\\n\\r\\n        IRiskPool(_pool).leave(_to);\\r\\n\\r\\n        emit LeftPool(_to, _pool);\\r\\n    }\\r\\n\\r\\n    function batchImplementForWithdrawRequest(address _pool) external onlyCohortOwner nonReentrant {\\r\\n        address[] memory requestUserList = IRiskPool(_pool).withdrawRequestList();\\r\\n        for (uint kk = 0; kk < requestUserList.length; kk++) {\\r\\n\\r\\n            IRiskPool(_pool).updateUserWithdraw(requestUserList[kk]);\\r\\n        }\\r\\n        IRiskPool(_pool).updateTotalWithdraw();\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev This function shows the premium reward which user can get.\\r\\n     * It can be changed in staking and coverage duration, but should be fixed value after coverage.\\r\\n     */\\r\\n    function premiumReward(\\r\\n        address _account,\\r\\n        address _riskPool,\\r\\n        uint16 _protocolIdx\\r\\n    ) private view returns (uint256) {\\r\\n        if (poolCapital[_riskPool] == 0 || poolCapital[_riskPool] == MAX_INTEGER || totalAPRofPools == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 _totalPr = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\r\\n        uint256 amount = IERC20(_riskPool).balanceOf(_account);\\r\\n        uint256 denominator = poolCapital[_riskPool] * totalAPRofPools;\\r\\n        uint256 numerator = _totalPr * amount * IRiskPool(_riskPool).APR();\\r\\n        return numerator / denominator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev for now all premiums and risk pools are paid in stable coin\\r\\n     * @dev we can trust claim request from ClaimAssesor\\r\\n     */\\r\\n    function requestClaim(\\r\\n        address _from,\\r\\n        uint16 _protocolIdx,\\r\\n        uint256 _amount\\r\\n    ) external override nonReentrant {\\r\\n        require(msg.sender == claimAssessor, \\\"UnoRe: Forbidden\\\");\\r\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\r\\n        require(block.timestamp - cohortActiveFrom <= duration && cohortActiveFrom != 0, \\\"UnoRe: Forbidden\\\");\\r\\n        (bool hasEnough, uint256 minPremium) = hasEnoughCapital(_protocolIdx, _amount);\\r\\n        require(hasEnough == true, \\\"UnoRe: Capital is not enough\\\");\\r\\n\\r\\n        uint256 currentPremium = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\r\\n        /** We should remain minimum amount in premium pool\\r\\n         * Uno Res reinsurance mechanism works in the following manner.\\r\\n         * There is a premium pool, into which all the premium collected from various protocols is held.\\r\\n         * At the end of the policy period, the premium is distributed to the 3 risk pools in accordance with the rewards distribution formula.\\r\\n         *\\r\\n         * The claims payout, is first done from the premium pool,\\r\\n         * after it's exhaustion the risk pool 1 is used then risk pool 2 and so on.\\r\\n         *\\r\\n         * There is a need of a minimum reserve premium to account for case scenarios\\r\\n         * where claims are incurred and premium pool and risk pool 1 is completely exhausted.\\r\\n         * The min premium reserve will be used to allocate rewards to all the pools (risk pool 1, risk pool 2, risk pool 3, etc.. )\\r\\n         */\\r\\n        if (_amount + minPremium <= currentPremium) {\\r\\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _amount);\\r\\n            emit ClaimPaid(_from, _protocolIdx, _amount);\\r\\n            return;\\r\\n        }\\r\\n        if (currentPremium > minPremium) {\\r\\n            // Tranfer from premium\\r\\n            uint256 _paid = currentPremium - minPremium;\\r\\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _paid);\\r\\n            _amount -= _paid;\\r\\n        }\\r\\n        /**\\r\\n         * @dev It's okay using for loop here, because the max length of pools is 3 at the moment\\r\\n         */\\r\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\r\\n            if (_amount == 0) break;\\r\\n            address _pool = getRiskPool[allRiskPools[ii]];\\r\\n            address _token = IRiskPool(_pool).currency();\\r\\n            uint256 _poolCapital = IERC20(_token).balanceOf(_pool);\\r\\n            if (_amount <= _poolCapital) {\\r\\n                _requestClaimToPool(_from, _amount, _pool);\\r\\n                _amount = 0;\\r\\n            } else {\\r\\n                _requestClaimToPool(_from, _poolCapital, _pool);\\r\\n                _amount -= _poolCapital;\\r\\n            }\\r\\n        }\\r\\n        emit ClaimPaid(_from, _protocolIdx, _amount);\\r\\n    }\\r\\n\\r\\n    function _startCohort() private {\\r\\n        uint256 totalCapital = 0;\\r\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\r\\n            address pool = getRiskPool[allRiskPools[ii]];\\r\\n            // for now we use total supply cause we deal only Stable coins\\r\\n            totalCapital += IERC20(pool).totalSupply();\\r\\n        }\\r\\n        if (totalCapital >= COHORT_START_CAPITAL) {\\r\\n            cohortActiveFrom = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalCapital() external view returns (uint256) {\\r\\n        uint256 totalCapital = 0;\\r\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\r\\n            address pool = getRiskPool[allRiskPools[ii]];\\r\\n            // for now we use total supply cause we deal only Stable coins\\r\\n            totalCapital += IERC20(pool).totalSupply();\\r\\n        }\\r\\n        return totalCapital;\\r\\n    }\\r\\n    function hasEnoughCapital(uint16 _protocolIdx, uint256 _amount) private returns (bool hasEnough, uint256 minPremium) {\\r\\n        uint256 totalCapital = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\r\\n        uint256 len = allRiskPools.length;\\r\\n        bool isLastPool = true;\\r\\n        for (uint256 ii = 0; ii < len; ii++) {\\r\\n            address pool = getRiskPool[allRiskPools[ii]];\\r\\n            // for now we use total supply cause we deal only stable coins\\r\\n            uint256 _ts = IERC20(pool).totalSupply();\\r\\n            totalCapital += _ts;\\r\\n            if (isLastPool && _ts != 0 && ii != len - 1) {\\r\\n                isLastPool = false;\\r\\n            }\\r\\n        }\\r\\n        minPremium = isLastPool ? 0 : IPremiumPool(premiumPool).minimumPremium();\\r\\n        hasEnough = totalCapital >= (_amount + minPremium);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev to save gas fee, we need this function\\r\\n     */\\r\\n    function _requestClaimToPool(\\r\\n        address _from,\\r\\n        uint256 _amount,\\r\\n        address _pool\\r\\n    ) private {\\r\\n        IRiskPool(_pool).requestClaim(_from, _amount);\\r\\n    }\\r\\n\\r\\n    function setDuration(uint256 _duration) external onlyCohortOwner {\\r\\n        duration = _duration;\\r\\n    }\\r\\n\\r\\n    function changePoolPriority(uint8 _prio1, uint8 _prio2) external onlyCohortOwner {\\r\\n        address _temp = getRiskPool[allRiskPools[_prio1]];\\r\\n        getRiskPool[_prio1] = getRiskPool[allRiskPools[_prio2]];\\r\\n        getRiskPool[_prio2] = _temp;\\r\\n    }\\r\\n\\r\\n    function totalPremiumReward(address _account, address _riskPool) external view returns (uint256) {\\r\\n        uint256 pr = 0;\\r\\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\\r\\n            uint16 protocolIdx = allProtocols[ii];\\r\\n            pr += premiumReward(_account, _riskPool, protocolIdx);\\r\\n        }\\r\\n        return pr;\\r\\n    }\\r\\n\\r\\n    function checkEpoch(address _pool) external view returns (uint256, uint256, uint256) {\\r\\n        return IRiskPool(_pool).checkEpochStatus();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9d1a4b658bcb3fd97fa88c162ddbd8e88437b50cdd9e612c824d31da967cf175\",\"license\":\"GPL-3.0\"},\"contracts/factories/CohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"../Cohort.sol\\\";\\r\\nimport \\\"../interfaces/ICohortFactory.sol\\\";\\r\\n\\r\\ncontract CohortFactory is ICohortFactory {\\r\\n    address public actuary;\\r\\n\\r\\n    constructor(address _actuary) {\\r\\n        actuary = _actuary;\\r\\n    }\\r\\n\\r\\n    function newCohort(\\r\\n        address _owner,\\r\\n        string memory _name,\\r\\n        address _claimAssessor,\\r\\n        uint256 _cohortStartCapital,\\r\\n        address _premiumFactory,\\r\\n        address _premiumCurrency,\\r\\n        uint256 _minPremium\\r\\n    ) external override returns (address) {\\r\\n        require(msg.sender == actuary, \\\"Uno Re:Forbidden\\\");\\r\\n        Cohort _cohort = new Cohort(_owner, _name, _claimAssessor, _cohortStartCapital);\\r\\n\\r\\n        _cohort.createPremiumPool(_premiumFactory, _premiumCurrency, _minPremium);\\r\\n        return address(_cohort);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9d301353e5381ebf8b7e6e7a0ba9685c71a872b97959bc80980b4a5b53105e30\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICohort.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface ICohort {\\r\\n    function requestClaim(\\r\\n        address _from,\\r\\n        uint16 _protocolIdx,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x74b199ab6eba062483bcacd8232c28fe19f5eb912f8c466efb75eb1256bea7fd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICohortFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface ICohortFactory {\\r\\n    function newCohort(\\r\\n        address _owner,\\r\\n        string memory _name,\\r\\n        address _claimAssessor,\\r\\n        uint256 _cohortStartCapital,\\r\\n        address _premiumFactory,\\r\\n        address _premiumCurrency,\\r\\n        uint256 _minPremium\\r\\n    ) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x2faec3b05611419bdf34bf24ae6e33d0d9ce408a75595b460466c976fdb2f0aa\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPremiumPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface IPremiumPool {\\r\\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external;\\r\\n\\r\\n    function withdrawPremium(\\r\\n        address _to,\\r\\n        uint16 _protocolIdx,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function transferAsset(\\r\\n        uint16 _protocolIdx,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external;\\r\\n\\r\\n    function minimumPremium() external returns (uint256);\\r\\n\\r\\n    function balanceOf(uint16 _protocolIdx) external view returns (uint256);\\r\\n\\r\\n    function premiumRewardOf(uint16 _protocolIdx) external returns (uint256);\\r\\n\\r\\n    function currency() external view returns (address);\\r\\n\\r\\n    function setPremiumReward(uint16 _protocolIdx) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x454754c54b6e32d8e6fe61d319f87cdbd4edc754188a66234d8b9a5e409173b3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPremiumPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface IPremiumPoolFactory {\\r\\n    function newPremiumPool(address _currency, uint256 _minimum) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x4a74abe2bf65ddb98ad06b715d6929e311b881ffb4430ad69410408fccb58e27\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface IRiskPool {\\r\\n    function enter(address _from, uint256 _amount) external;\\r\\n\\r\\n    function leave(address _to) external;\\r\\n\\r\\n    function requestClaim(address _from, uint256 _amount) external;\\r\\n\\r\\n    function epochStart() external;\\r\\n\\r\\n    function initialRiskPool(address _from, uint256 _amount) external;\\r\\n\\r\\n    function updateUserDeposit(address _user) external;\\r\\n\\r\\n    function updateTotalDeposit() external;\\r\\n\\r\\n    function resetDepositRequestList() external;\\r\\n\\r\\n    function updateUserWithdraw(address _user) external;\\r\\n\\r\\n    function updateTotalWithdraw() external;\\r\\n\\r\\n    function resetWithdrawRequestList() external;\\r\\n\\r\\n    function currency() external view returns (address);\\r\\n\\r\\n    function depositRequestList() external view returns (address[] memory);\\r\\n\\r\\n    function withdrawRequestList() external view returns (address[] memory);\\r\\n\\r\\n    function APR() external view returns (uint256);\\r\\n\\r\\n    function maxSize() external view returns (uint256);\\r\\n\\r\\n    function checkEpochStatus() external view returns (uint256, uint256, uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x420cb99140e9619d240b50790d1f96c0a88c5858e573997a8a4e5ec46e939835\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRiskPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.0;\\r\\n\\r\\ninterface IRiskPoolFactory {\\r\\n    function newRiskPool(\\r\\n        string calldata _name,\\r\\n        string calldata _symbol,\\r\\n        address _cohort,\\r\\n        address _currency,\\r\\n        uint256 _APR,\\r\\n        uint256 _maxSize\\r\\n    ) external returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x9adeea63ff40595b3a8cc3f91ae5380ce4f3e05bbbd133a2f438ab9cca9afee6\",\"license\":\"GPL-3.0\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.0;\\r\\n\\r\\n// from Uniswap TransferHelper library\\r\\nlibrary TransferHelper {\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint256 value) internal {\\r\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\r\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xda9206acf682d547baa42aba5fbc029e343e2f3c3a22f48ed5adae65f1c68f9e\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613c22380380613c2283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b613b91806100916000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637a95129b1461003b578063ba332fa414610059575b600080fd5b61004361006c565b604051610050919061028c565b60405180910390f35b610043610067366004610186565b61007b565b6000546001600160a01b031681565b600080546001600160a01b031633146100af5760405162461bcd60e51b81526004016100a69061033e565b60405180910390fd5b6000888888886040516100c19061015d565b6100ce94939291906102c4565b604051809103906000f0801580156100ea573d6000803e3d6000fd5b50604051636464abdb60e01b81529091506001600160a01b03821690636464abdb9061011e908890889088906004016102a0565b600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b50929b9a5050505050505050505050565b6137d08061038c83390190565b80356001600160a01b038116811461018157600080fd5b919050565b600080600080600080600060e0888a0312156101a0578283fd5b6101a98861016a565b965060208089013567ffffffffffffffff808211156101c6578586fd5b818b0191508b601f8301126101d9578586fd5b8135818111156101eb576101eb610375565b604051601f8201601f191681018501838111828210171561020e5761020e610375565b60405281815283820185018e1015610224578788fd5b818585018683013787858383010152809a5050505050506102476040890161016a565b94506060880135935061025c6080890161016a565b925061026a60a0890161016a565b915060c0880135905092959891949750929550565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038616825260206080818401528551806080850152825b818110156103005787810183015185820160a0015282016102e4565b81811115610311578360a083870101525b50601f01601f1916830160a001915061032f9050604083018561027f565b82606083015295945050505050565b60208082526010908201527f556e6f2052653a466f7262696464656e00000000000000000000000000000000604082015260600190565b634e487b7160e01b600052604160045260246000fdfe60a0604052600019600e553480156200001757600080fd5b50604051620037d0380380620037d08339810160408190526200003a9162000168565b6001600055600480546001600160a01b0319166001600160a01b03861617905582516200006f906005906020860190620000a5565b50608052600280546001600160a01b039092166001600160a01b0319928316179055600180549091163317905550620002bb9050565b828054620000b39062000268565b90600052602060002090601f016020900481019282620000d7576000855562000122565b82601f10620000f257805160ff191683800117855562000122565b8280016001018555821562000122579182015b828111156200012257825182559160200191906001019062000105565b506200013092915062000134565b5090565b5b8082111562000130576000815560010162000135565b80516001600160a01b03811681146200016357600080fd5b919050565b600080600080608085870312156200017e578384fd5b62000189856200014b565b602086810151919550906001600160401b0380821115620001a8578586fd5b818801915088601f830112620001bc578586fd5b815181811115620001d157620001d1620002a5565b604051601f8201601f1916810185018381118282101715620001f757620001f7620002a5565b60405281815283820185018b10156200020e578788fd5b8792505b8183101562000231578383018501518184018601529184019162000212565b818311156200024257878583830101525b809750505050505062000258604086016200014b565b6060959095015193969295505050565b6002810460018216806200027d57607f821691505b602082108114156200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6080516134f2620002de6000396000818161155901526129ac01526134f26000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636464abdb116100f9578063c6e8991511610097578063eea3dd4711610071578063eea3dd471461034a578063f6be71d11461035d578063f8ba79be14610370578063fc03916514610392576101b9565b8063c6e8991514610309578063c700b85f14610311578063d2c7c2a414610324576101b9565b8063b381ff82116100d3578063b381ff82146102d3578063b92d5d32146102db578063c3dcfcf1146102ee578063c45a015514610301576101b9565b80636464abdb146102b05780638da5cb5b146102c3578063ac1029f8146102cb576101b9565b806334db3990116101665780634ba69faa116101405780634ba69faa1461026f57806355cc7b38146102775780635fbfdf7d1461028a57806363186b201461029d576101b9565b806334db39901461022957806338fcad17146102495780633f62327d1461025c576101b9565b80630fb5a6b4116101975780630fb5a6b4146102115780631083b85614610219578063128c700114610221576101b9565b806306fdde03146101be5780630a3ecc6e146101dc5780630c58ae78146101f1575b600080fd5b6101c661039a565b6040516101d39190613059565b60405180910390f35b6101ef6101ea366004612b9c565b610428565b005b6102046101ff366004612b24565b6108e0565b6040516101d391906132af565b61020461096b565b610204610971565b610204610977565b61023c610237366004612ecd565b61097d565b6040516101d39190612f8b565b6101ef610257366004612aec565b610998565b6101ef61026a366004612e55565b610b67565b61023c610cee565b6101ef610285366004612ee7565b610cfd565b6101ef610298366004612b5c565b610e23565b6101ef6102ab366004612ce5565b611183565b6101ef6102be366004612b5c565b611479565b61023c611548565b610204611557565b61020461157b565b6101ef6102e9366004612bd9565b611581565b61023c6102fc366004612d97565b6117b4565b61023c611a19565b61023c611a28565b6101ef61031f366004612aec565b611a37565b610337610332366004612e3b565b611be5565b6040516101d397969594939291906132b8565b6101ef610358366004612b24565b611dcc565b6101ef61036b366004612e70565b612108565b61038361037e366004612aec565b612137565b6040516101d393929190613326565b6102046121ba565b600580546103a790613425565b80601f01602080910402602001604051908101604052809291908181526020018280546103d390613425565b80156104205780601f106103f557610100808354040283529160200191610420565b820191906000526020600020905b81548152906001019060200180831161040357829003601f168201915b505050505081565b600260005414156104545760405162461bcd60e51b815260040161044b90613255565b60405180910390fd5b60026000819055546001600160a01b031633146104835760405162461bcd60e51b815260040161044b906131a5565b806104a05760405162461bcd60e51b815260040161044b9061316e565b6006546007546104b090426133de565b111580156104bf575060075415155b6104db5760405162461bcd60e51b815260040161044b906131a5565b6000806104e884846122bb565b909250905060018215151461050f5760405162461bcd60e51b815260040161044b9061321e565b60035460405163cfbff97d60e01b81526000916001600160a01b03169063cfbff97d9061054090889060040161328c565b60206040518083038186803b15801561055857600080fd5b505afa15801561056c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105909190612e88565b90508061059d8386613362565b11610653576003546040516323c4859f60e21b81526001600160a01b0390911690638f12167c906105d690899089908990600401612fc3565b600060405180830381600087803b1580156105f057600080fd5b505af1158015610604573d6000803e3d6000fd5b50505050856001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a868660405161064392919061329b565b60405180910390a25050506108d6565b818111156106de57600061066783836133de565b6003546040516323c4859f60e21b81529192506001600160a01b031690638f12167c9061069c908a908a908690600401612fc3565b600060405180830381600087803b1580156106b657600080fd5b505af11580156106ca573d6000803e3d6000fd5b5050505080856106da91906133de565b9450505b60005b600b5481101561088e57846106f55761088e565b6000600a6000600b848154811061071c57634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff168352828101939093526040918201812054825163e5a6b10f60e01b815292516001600160a01b0390911694509092849263e5a6b10f9260048083019392829003018186803b15801561078b57600080fd5b505afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190612b08565b90506000816001600160a01b03166370a08231846040518263ffffffff1660e01b81526004016107f39190612f8b565b60206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190612e88565b9050808811610860576108578a8985612521565b60009750610878565b61086b8a8285612521565b61087581896133de565b97505b505050808061088690613460565b9150506106e1565b50856001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a86866040516108ca92919061329b565b60405180910390a25050505b5050600160005550565b600080805b6009548110156109635760006009828154811061091257634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050610943868683612586565b61094d9084613362565b925050808061095b90613460565b9150506108e5565b509392505050565b60065481565b600b5490565b60075481565b600a602052600090815260409020546001600160a01b031681565b6004546001600160a01b031633146109c25760405162461bcd60e51b815260040161044b906131a5565b600260005414156109e55760405162461bcd60e51b815260040161044b90613255565b60026000819055506000816001600160a01b03166366348eab6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a2857600080fd5b505afa158015610a3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a649190810190612c04565b905060005b8151811015610b0a57826001600160a01b031663127e14a4838381518110610aa157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610ac59190612f8b565b600060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050508080610b0290613460565b915050610a69565b50816001600160a01b0316635d2c62a96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b5050600160005550505050565b60026000541415610b8a5760405162461bcd60e51b815260040161044b90613255565b600260005580610bac5760405162461bcd60e51b815260040161044b9061316e565b6003546040805163e5a6b10f60e01b81529051610c3e926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190612b08565b60035433906001600160a01b0316846127aa565b600354604051633f62327d60e01b81526001600160a01b0390911690633f62327d90610c70908590859060040161329b565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050306001600160a01b03167f6f478da447863bf1d87ffc6967f8ba188546e83cc222b62f2e70fd993cfdafa98383604051610cdd92919061329b565b60405180910390a250506001600055565b6003546001600160a01b031681565b6004546001600160a01b03163314610d275760405162461bcd60e51b815260040161044b906131a5565b6000600a6000600b8560ff1681548110610d5157634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528301939093526040909101812054600b80546001600160a01b039092169450600a939091908616908110610db557634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528381019490945260409283018220549681168252600a90935281812080546001600160a01b03199081166001600160a01b039889161790915594909216825290208054919093169116179055565b60026000541415610e465760405162461bcd60e51b815260040161044b90613255565b60026000908155600e546001600160a01b0384168252600c6020526040909120541480610e8a57506001600160a01b0382166000908152600c602052604090205415155b610ea65760405162461bcd60e51b815260040161044b9061306c565b80610ec35760405162461bcd60e51b815260040161044b9061316e565b6000826001600160a01b0316632565b1596040518163ffffffff1660e01b815260040160206040518083038186803b158015610efe57600080fd5b505afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190612e88565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7357600080fd5b505afa158015610f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fab9190612e88565b9050610fb78184613362565b821015610fd65760405162461bcd60e51b815260040161044b90613100565b6000846001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101157600080fd5b505afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110499190612b08565b9050611057818787876127aa565b604051637e348b7d60e01b81526001600160a01b03861690637e348b7d906110859089908890600401612fe8565b600060405180830381600087803b15801561109f57600080fd5b505af11580156110b3573d6000803e3d6000fd5b5050600e546001600160a01b0388166000908152600c602052604090205414915061110d9050576001600160a01b0385166000908152600c602052604081208054869290611102908490613362565b92505081905561112a565b6001600160a01b0385166000908152600c60205260409020849055835b50846001600160a01b0316866001600160a01b03167fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f8660405161116e91906132af565b60405180910390a35050600160005550505050565b6004546001600160a01b031633146111ad5760405162461bcd60e51b815260040161044b906131a5565b6009546000906111be57600061121c565b600980546111ce906001906133de565b815481106111ec57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff16600161121c919061333c565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60108204018054600f9092166002026101000a61ffff81810219909316928416029190911790556040805160e0810182528481526001600160a01b038a166020808301919091528251601f8d0182900482028101820184528c8152939450909291830191908c908c9081908401838280828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250506103e86020808501919091526001604094850181905261ffff871684526008825292849020855181558582015193810180546001600160a01b0319166001600160a01b039095169490941790935592840151805192936113ab936002860193509101906129d9565b50606082015180516113c79160038401916020909101906129d9565b50608082015180516113e39160048401916020909101906129d9565b5060a08201516005909101805460c0909301511515620100000262ff00001961ffff90931661ffff19909416939093179190911691909117905560065482111561142d5760068290555b306001600160a01b03167fbcf8a46c68576cc4e52eb8fbc678b3ce3adbeadb33126980d791f827ccff411182604051611466919061328c565b60405180910390a2505050505050505050565b6001546001600160a01b031633146114a35760405162461bcd60e51b815260040161044b906131a5565b604051635800f04d60e11b81526001600160a01b0384169063b001e09a906114d19085908590600401612fe8565b602060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115239190612b08565b600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b6004546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095490565b600260005414156115a45760405162461bcd60e51b815260040161044b90613255565b60026000556004546001600160a01b031633146115d35760405162461bcd60e51b815260040161044b906131a5565b806115f05760405162461bcd60e51b815260040161044b9061316e565b6001600160a01b0382166116165760405162461bcd60e51b815260040161044b90613137565b6000826001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190612b08565b9050611697813385856127aa565b600e546001600160a01b0384166000908152600c6020526040902054146116eb576001600160a01b0383166000908152600c6020526040812080548492906116e0908490613362565b925050819055611708565b6001600160a01b0383166000908152600c60205260409020829055815b50604051635c96ae9960e11b81526001600160a01b0384169063b92d5d32906117379033908690600401612fe8565b600060405180830381600087803b15801561175157600080fd5b505af1158015611765573d6000803e3d6000fd5b505050506117716128af565b7f20815c9b51fae3c91e66fe01c2b0badeedd429309acfd33f29e4454b20b97e3f83836040516117a2929190612fe8565b60405180910390a15050600160005550565b6004546000906001600160a01b031633146117e15760405162461bcd60e51b815260040161044b906131a5565b600b54604051634f35e6d560e01b81526001600160a01b03871690634f35e6d59061181e908d908d908d908d9030908d908d908d90600401613001565b602060405180830381600087803b15801561183857600080fd5b505af115801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190612b08565b915060008082116118825760006118d9565b600b61188f6001846133de565b815481106118ad57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660016118d9919061337a565b600b80546001810190915560208082047f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805460ff808616601f9095166101000a8581029102199091161790556000918252600a90526040812080546001600160a01b0387166001600160a01b0319909116179055600d80549293508792909190611966908490613362565b9091555050600e546001600160a01b0384166000818152600c60205260408082209390935582516315e5a1e560e01b8152925191926315e5a1e5926004808301939282900301818387803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b50506040516001600160a01b03861692503091507f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd5838021790600090a3505098975050505050505050565b6001546001600160a01b031681565b6002546001600160a01b031681565b6004546001600160a01b03163314611a615760405162461bcd60e51b815260040161044b906131a5565b60026000541415611a845760405162461bcd60e51b815260040161044b90613255565b60026000819055506000816001600160a01b031663e19d64d16040518163ffffffff1660e01b815260040160006040518083038186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b039190810190612c04565b905060005b8151811015611ba957826001600160a01b0316630e0e65d2838381518110611b4057634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611b649190612f8b565b600060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b505050508080611ba190613460565b915050611b08565b50816001600160a01b03166311373f856040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b4657600080fd5b60086020526000908152604090208054600182015460028301805492936001600160a01b0390921692611c1790613425565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4390613425565b8015611c905780601f10611c6557610100808354040283529160200191611c90565b820191906000526020600020905b815481529060010190602001808311611c7357829003601f168201915b505050505090806003018054611ca590613425565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd190613425565b8015611d1e5780601f10611cf357610100808354040283529160200191611d1e565b820191906000526020600020905b815481529060010190602001808311611d0157829003601f168201915b505050505090806004018054611d3390613425565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5f90613425565b8015611dac5780601f10611d8157610100808354040283529160200191611dac565b820191906000526020600020905b815481529060010190602001808311611d8f57829003601f168201915b5050506005909301549192505061ffff81169060ff620100009091041687565b60026000541415611def5760405162461bcd60e51b815260040161044b90613255565b600260005560075415801590611e125750600654600754611e1090426133de565b115b611e2e5760405162461bcd60e51b815260040161044b906131a5565b6001600160a01b0381166000908152600c602052604090205415801590611e6f5750600e546001600160a01b0382166000908152600c602052604090205414155b611e8b5760405162461bcd60e51b815260040161044b906131dc565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611eba908690600401612f8b565b60206040518083038186803b158015611ed257600080fd5b505afa158015611ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0a9190612e88565b905080611f295760405162461bcd60e51b815260040161044b9061316e565b60005b60095481101561206757600060098281548110611f5957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060108204015460035460405163bcd84a7160e01b8152600f9093166002026101000a90910461ffff1692506001600160a01b03169063bcd84a7190611fac90849060040161328c565b600060405180830381600087803b158015611fc657600080fd5b505af1158015611fda573d6000803e3d6000fd5b505050506000611feb868684612586565b6003546040516323c4859f60e21b81529192506001600160a01b031690638f12167c9061202090899086908690600401612fc3565b600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b505050505050808061205f90613460565b915050611f2c565b50604051635f6fbbd360e11b81526001600160a01b0383169063bedf77a690612094908690600401612f8b565b600060405180830381600087803b1580156120ae57600080fd5b505af11580156120c2573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f3fdbe9ffcd54f2ab6b430c78a338bde8aefdc06f4720928defb03e50e9da853290600090a35050600160005550565b6004546001600160a01b031633146121325760405162461bcd60e51b815260040161044b906131a5565b600655565b6000806000836001600160a01b0316631feeb4ee6040518163ffffffff1660e01b815260040160606040518083038186803b15801561217557600080fd5b505afa158015612189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ad9190612ea0565b9250925092509193909250565b600080805b600b548110156122b5576000600a6000600b84815481106121f057634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820190205481516318160ddd60e01b815291516001600160a01b03909116935083926318160ddd9260048082019391829003018186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122959190612e88565b61229f9084613362565b92505080806122ad90613460565b9150506121bf565b50905090565b60035460405163cfbff97d60e01b8152600091829182916001600160a01b03169063cfbff97d906122f090889060040161328c565b60206040518083038186803b15801561230857600080fd5b505afa15801561231c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123409190612e88565b600b54909150600160005b82811015612470576000600a6000600b848154811061237a57634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820181205482516318160ddd60e01b815292516001600160a01b039091169450909284926318160ddd9260048083019392829003018186803b1580156123e957600080fd5b505afa1580156123fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124219190612e88565b905061242d8187613362565b955083801561243b57508015155b8015612451575061244d6001866133de565b8314155b1561245b57600093505b5050808061246890613460565b91505061234b565b508061250357600360009054906101000a90046001600160a01b03166001600160a01b031663087d8d016040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156124c657600080fd5b505af11580156124da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fe9190612e88565b612506565b60005b93506125128487613362565b83101594505050509250929050565b6040516301e51e9760e01b81526001600160a01b038216906301e51e979061254f9086908690600401612fe8565b600060405180830381600087803b15801561256957600080fd5b505af115801561257d573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166000908152600c602052604081205415806125c45750600e546001600160a01b0384166000908152600c6020526040902054145b806125cf5750600d54155b156125dc575060006127a3565b60035460405163cfbff97d60e01b81526000916001600160a01b03169063cfbff97d9061260d90869060040161328c565b60206040518083038186803b15801561262557600080fd5b505afa158015612639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265d9190612e88565b90506000846001600160a01b03166370a08231876040518263ffffffff1660e01b815260040161268d9190612f8b565b60206040518083038186803b1580156126a557600080fd5b505afa1580156126b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dd9190612e88565b600d546001600160a01b0387166000908152600c60205260408120549293509161270791906133bf565b90506000866001600160a01b031663bd30558e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561274457600080fd5b505afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c9190612e88565b61278684866133bf565b61279091906133bf565b905061279c828261339f565b9450505050505b9392505050565b600080856001600160a01b03166323b872dd8686866040516024016127d193929190612f9f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161281f9190612f6f565b6000604051808303816000865af19150503d806000811461285c576040519150601f19603f3d011682016040523d82523d6000602084013e612861565b606091505b509150915081801561288b57508051158061288b57508080602001905181019061288b9190612cc5565b6128a75760405162461bcd60e51b815260040161044b906130a3565b505050505050565b6000805b600b548110156129a9576000600a6000600b84815481106128e457634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820190205481516318160ddd60e01b815291516001600160a01b03909116935083926318160ddd9260048082019391829003018186803b15801561295157600080fd5b505afa158015612965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129899190612e88565b6129939084613362565b92505080806129a190613460565b9150506128b3565b507f000000000000000000000000000000000000000000000000000000000000000081106129d657426007555b50565b8280546129e590613425565b90600052602060002090601f016020900481019282612a075760008555612a4d565b82601f10612a2057805160ff1916838001178555612a4d565b82800160010185558215612a4d579182015b82811115612a4d578251825591602001919060010190612a32565b50612a59929150612a5d565b5090565b5b80821115612a595760008155600101612a5e565b8051612a7d816134a7565b919050565b60008083601f840112612a93578182fd5b50813567ffffffffffffffff811115612aaa578182fd5b602083019150836020828501011115612ac257600080fd5b9250929050565b803561ffff81168114612a7d57600080fd5b803560ff81168114612a7d57600080fd5b600060208284031215612afd578081fd5b81356127a3816134a7565b600060208284031215612b19578081fd5b81516127a3816134a7565b60008060408385031215612b36578081fd5b8235612b41816134a7565b91506020830135612b51816134a7565b809150509250929050565b600080600060608486031215612b70578081fd5b8335612b7b816134a7565b92506020840135612b8b816134a7565b929592945050506040919091013590565b600080600060608486031215612bb0578283fd5b8335612bbb816134a7565b9250612bc960208501612ac9565b9150604084013590509250925092565b60008060408385031215612beb578182fd5b8235612bf6816134a7565b946020939093013593505050565b60006020808385031215612c16578182fd5b825167ffffffffffffffff80821115612c2d578384fd5b818501915085601f830112612c40578384fd5b815181811115612c5257612c52613491565b83810260405185828201018181108582111715612c7157612c71613491565b604052828152858101935084860182860187018a1015612c8f578788fd5b8795505b83861015612cb857612ca481612a72565b855260019590950194938601938601612c93565b5098975050505050505050565b600060208284031215612cd6578081fd5b815180151581146127a3578182fd5b60008060008060008060008060a0898b031215612d00578384fd5b883567ffffffffffffffff80821115612d17578586fd5b612d238c838d01612a82565b909a50985060208b01359150612d38826134a7565b90965060408a01359080821115612d4d578586fd5b612d598c838d01612a82565b909750955060608b0135915080821115612d71578485fd5b50612d7e8b828c01612a82565b999c989b50969995989497949560800135949350505050565b60008060008060008060008060c0898b031215612db2578384fd5b883567ffffffffffffffff80821115612dc9578586fd5b612dd58c838d01612a82565b909a50985060208b0135915080821115612ded578586fd5b50612dfa8b828c01612a82565b9097509550506040890135612e0e816134a7565b93506060890135612e1e816134a7565b979a969950949793969295929450505060808201359160a0013590565b600060208284031215612e4c578081fd5b6127a382612ac9565b60008060408385031215612e67578081fd5b612bf683612ac9565b600060208284031215612e81578081fd5b5035919050565b600060208284031215612e99578081fd5b5051919050565b600080600060608486031215612eb4578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612ede578081fd5b6127a382612adb565b60008060408385031215612ef9578182fd5b612f0283612adb565b9150612f1060208401612adb565b90509250929050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612f5b8160208601602086016133f5565b601f01601f19169290920160200192915050565b60008251612f818184602087016133f5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393909316835261ffff919091166020830152604082015260600190565b6001600160a01b03929092168252602082015260400190565b600060c0825261301560c083018a8c612f19565b828103602084015261302881898b612f19565b6001600160a01b03978816604085015295909616606083015250608081019290925260a09091015295945050505050565b6000602082526127a36020830184612f43565b60208082526019908201527f556e6f52653a205269736b506f6f6c206e6f7420657869737400000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526018908201527f556e6f52653a205269736b506f6f6c206f766572666c6f770000000000000000604082015260600190565b60208082526013908201527f556e6f52653a205a45524f204164647265737300000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b60208082526022908201527f556e6f52653a205269736b506f6f6c206e6f74206578697374206f7220656d70604082015261747960f01b606082015260800190565b6020808252601c908201527f556e6f52653a204361706974616c206973206e6f7420656e6f75676800000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff91909116815260200190565b61ffff929092168252602082015260400190565b90815260200190565b60008882526001600160a01b038816602083015260e060408301526132e060e0830188612f43565b82810360608401526132f28188612f43565b905082810360808401526133068187612f43565b61ffff9590951660a0840152505090151560c09091015295945050505050565b9283526020830191909152604082015260600190565b600061ffff8083168185168083038211156133595761335961347b565b01949350505050565b600082198211156133755761337561347b565b500190565b600060ff821660ff84168060ff038211156133975761339761347b565b019392505050565b6000826133ba57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156133d9576133d961347b565b500290565b6000828210156133f0576133f061347b565b500390565b60005b838110156134105781810151838201526020016133f8565b8381111561341f576000848401525b50505050565b60028104600182168061343957607f821691505b6020821081141561345a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156134745761347461347b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146129d657600080fdfea2646970667358221220509857a93d43484b24851a57bc455fd4349e4e67f71e6b861aea0d9f93f7c3af64736f6c63430008000033a2646970667358221220a7cbecc7b7d063943fe699f2ee4eb8c9373332afd3d00a32015a27c4023a123d64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80637a95129b1461003b578063ba332fa414610059575b600080fd5b61004361006c565b604051610050919061028c565b60405180910390f35b610043610067366004610186565b61007b565b6000546001600160a01b031681565b600080546001600160a01b031633146100af5760405162461bcd60e51b81526004016100a69061033e565b60405180910390fd5b6000888888886040516100c19061015d565b6100ce94939291906102c4565b604051809103906000f0801580156100ea573d6000803e3d6000fd5b50604051636464abdb60e01b81529091506001600160a01b03821690636464abdb9061011e908890889088906004016102a0565b600060405180830381600087803b15801561013857600080fd5b505af115801561014c573d6000803e3d6000fd5b50929b9a5050505050505050505050565b6137d08061038c83390190565b80356001600160a01b038116811461018157600080fd5b919050565b600080600080600080600060e0888a0312156101a0578283fd5b6101a98861016a565b965060208089013567ffffffffffffffff808211156101c6578586fd5b818b0191508b601f8301126101d9578586fd5b8135818111156101eb576101eb610375565b604051601f8201601f191681018501838111828210171561020e5761020e610375565b60405281815283820185018e1015610224578788fd5b818585018683013787858383010152809a5050505050506102476040890161016a565b94506060880135935061025c6080890161016a565b925061026a60a0890161016a565b915060c0880135905092959891949750929550565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001600160a01b038616825260206080818401528551806080850152825b818110156103005787810183015185820160a0015282016102e4565b81811115610311578360a083870101525b50601f01601f1916830160a001915061032f9050604083018561027f565b82606083015295945050505050565b60208082526010908201527f556e6f2052653a466f7262696464656e00000000000000000000000000000000604082015260600190565b634e487b7160e01b600052604160045260246000fdfe60a0604052600019600e553480156200001757600080fd5b50604051620037d0380380620037d08339810160408190526200003a9162000168565b6001600055600480546001600160a01b0319166001600160a01b03861617905582516200006f906005906020860190620000a5565b50608052600280546001600160a01b039092166001600160a01b0319928316179055600180549091163317905550620002bb9050565b828054620000b39062000268565b90600052602060002090601f016020900481019282620000d7576000855562000122565b82601f10620000f257805160ff191683800117855562000122565b8280016001018555821562000122579182015b828111156200012257825182559160200191906001019062000105565b506200013092915062000134565b5090565b5b8082111562000130576000815560010162000135565b80516001600160a01b03811681146200016357600080fd5b919050565b600080600080608085870312156200017e578384fd5b62000189856200014b565b602086810151919550906001600160401b0380821115620001a8578586fd5b818801915088601f830112620001bc578586fd5b815181811115620001d157620001d1620002a5565b604051601f8201601f1916810185018381118282101715620001f757620001f7620002a5565b60405281815283820185018b10156200020e578788fd5b8792505b8183101562000231578383018501518184018601529184019162000212565b818311156200024257878583830101525b809750505050505062000258604086016200014b565b6060959095015193969295505050565b6002810460018216806200027d57607f821691505b602082108114156200029f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6080516134f2620002de6000396000818161155901526129ac01526134f26000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80636464abdb116100f9578063c6e8991511610097578063eea3dd4711610071578063eea3dd471461034a578063f6be71d11461035d578063f8ba79be14610370578063fc03916514610392576101b9565b8063c6e8991514610309578063c700b85f14610311578063d2c7c2a414610324576101b9565b8063b381ff82116100d3578063b381ff82146102d3578063b92d5d32146102db578063c3dcfcf1146102ee578063c45a015514610301576101b9565b80636464abdb146102b05780638da5cb5b146102c3578063ac1029f8146102cb576101b9565b806334db3990116101665780634ba69faa116101405780634ba69faa1461026f57806355cc7b38146102775780635fbfdf7d1461028a57806363186b201461029d576101b9565b806334db39901461022957806338fcad17146102495780633f62327d1461025c576101b9565b80630fb5a6b4116101975780630fb5a6b4146102115780631083b85614610219578063128c700114610221576101b9565b806306fdde03146101be5780630a3ecc6e146101dc5780630c58ae78146101f1575b600080fd5b6101c661039a565b6040516101d39190613059565b60405180910390f35b6101ef6101ea366004612b9c565b610428565b005b6102046101ff366004612b24565b6108e0565b6040516101d391906132af565b61020461096b565b610204610971565b610204610977565b61023c610237366004612ecd565b61097d565b6040516101d39190612f8b565b6101ef610257366004612aec565b610998565b6101ef61026a366004612e55565b610b67565b61023c610cee565b6101ef610285366004612ee7565b610cfd565b6101ef610298366004612b5c565b610e23565b6101ef6102ab366004612ce5565b611183565b6101ef6102be366004612b5c565b611479565b61023c611548565b610204611557565b61020461157b565b6101ef6102e9366004612bd9565b611581565b61023c6102fc366004612d97565b6117b4565b61023c611a19565b61023c611a28565b6101ef61031f366004612aec565b611a37565b610337610332366004612e3b565b611be5565b6040516101d397969594939291906132b8565b6101ef610358366004612b24565b611dcc565b6101ef61036b366004612e70565b612108565b61038361037e366004612aec565b612137565b6040516101d393929190613326565b6102046121ba565b600580546103a790613425565b80601f01602080910402602001604051908101604052809291908181526020018280546103d390613425565b80156104205780601f106103f557610100808354040283529160200191610420565b820191906000526020600020905b81548152906001019060200180831161040357829003601f168201915b505050505081565b600260005414156104545760405162461bcd60e51b815260040161044b90613255565b60405180910390fd5b60026000819055546001600160a01b031633146104835760405162461bcd60e51b815260040161044b906131a5565b806104a05760405162461bcd60e51b815260040161044b9061316e565b6006546007546104b090426133de565b111580156104bf575060075415155b6104db5760405162461bcd60e51b815260040161044b906131a5565b6000806104e884846122bb565b909250905060018215151461050f5760405162461bcd60e51b815260040161044b9061321e565b60035460405163cfbff97d60e01b81526000916001600160a01b03169063cfbff97d9061054090889060040161328c565b60206040518083038186803b15801561055857600080fd5b505afa15801561056c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105909190612e88565b90508061059d8386613362565b11610653576003546040516323c4859f60e21b81526001600160a01b0390911690638f12167c906105d690899089908990600401612fc3565b600060405180830381600087803b1580156105f057600080fd5b505af1158015610604573d6000803e3d6000fd5b50505050856001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a868660405161064392919061329b565b60405180910390a25050506108d6565b818111156106de57600061066783836133de565b6003546040516323c4859f60e21b81529192506001600160a01b031690638f12167c9061069c908a908a908690600401612fc3565b600060405180830381600087803b1580156106b657600080fd5b505af11580156106ca573d6000803e3d6000fd5b5050505080856106da91906133de565b9450505b60005b600b5481101561088e57846106f55761088e565b6000600a6000600b848154811061071c57634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff168352828101939093526040918201812054825163e5a6b10f60e01b815292516001600160a01b0390911694509092849263e5a6b10f9260048083019392829003018186803b15801561078b57600080fd5b505afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190612b08565b90506000816001600160a01b03166370a08231846040518263ffffffff1660e01b81526004016107f39190612f8b565b60206040518083038186803b15801561080b57600080fd5b505afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108439190612e88565b9050808811610860576108578a8985612521565b60009750610878565b61086b8a8285612521565b61087581896133de565b97505b505050808061088690613460565b9150506106e1565b50856001600160a01b03167f2426c2fe4ecc089361233f90d45067fd7ba45a260b464b8e920ad9b78969161a86866040516108ca92919061329b565b60405180910390a25050505b5050600160005550565b600080805b6009548110156109635760006009828154811061091257634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff169050610943868683612586565b61094d9084613362565b925050808061095b90613460565b9150506108e5565b509392505050565b60065481565b600b5490565b60075481565b600a602052600090815260409020546001600160a01b031681565b6004546001600160a01b031633146109c25760405162461bcd60e51b815260040161044b906131a5565b600260005414156109e55760405162461bcd60e51b815260040161044b90613255565b60026000819055506000816001600160a01b03166366348eab6040518163ffffffff1660e01b815260040160006040518083038186803b158015610a2857600080fd5b505afa158015610a3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a649190810190612c04565b905060005b8151811015610b0a57826001600160a01b031663127e14a4838381518110610aa157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401610ac59190612f8b565b600060405180830381600087803b158015610adf57600080fd5b505af1158015610af3573d6000803e3d6000fd5b505050508080610b0290613460565b915050610a69565b50816001600160a01b0316635d2c62a96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b5050600160005550505050565b60026000541415610b8a5760405162461bcd60e51b815260040161044b90613255565b600260005580610bac5760405162461bcd60e51b815260040161044b9061316e565b6003546040805163e5a6b10f60e01b81529051610c3e926001600160a01b03169163e5a6b10f916004808301926020929190829003018186803b158015610bf257600080fd5b505afa158015610c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2a9190612b08565b60035433906001600160a01b0316846127aa565b600354604051633f62327d60e01b81526001600160a01b0390911690633f62327d90610c70908590859060040161329b565b600060405180830381600087803b158015610c8a57600080fd5b505af1158015610c9e573d6000803e3d6000fd5b50505050306001600160a01b03167f6f478da447863bf1d87ffc6967f8ba188546e83cc222b62f2e70fd993cfdafa98383604051610cdd92919061329b565b60405180910390a250506001600055565b6003546001600160a01b031681565b6004546001600160a01b03163314610d275760405162461bcd60e51b815260040161044b906131a5565b6000600a6000600b8560ff1681548110610d5157634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528301939093526040909101812054600b80546001600160a01b039092169450600a939091908616908110610db557634e487b7160e01b600052603260045260246000fd5b60009182526020808320818304015460ff601f9093166101000a9004821684528381019490945260409283018220549681168252600a90935281812080546001600160a01b03199081166001600160a01b039889161790915594909216825290208054919093169116179055565b60026000541415610e465760405162461bcd60e51b815260040161044b90613255565b60026000908155600e546001600160a01b0384168252600c6020526040909120541480610e8a57506001600160a01b0382166000908152600c602052604090205415155b610ea65760405162461bcd60e51b815260040161044b9061306c565b80610ec35760405162461bcd60e51b815260040161044b9061316e565b6000826001600160a01b0316632565b1596040518163ffffffff1660e01b815260040160206040518083038186803b158015610efe57600080fd5b505afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190612e88565b90506000836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7357600080fd5b505afa158015610f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fab9190612e88565b9050610fb78184613362565b821015610fd65760405162461bcd60e51b815260040161044b90613100565b6000846001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561101157600080fd5b505afa158015611025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110499190612b08565b9050611057818787876127aa565b604051637e348b7d60e01b81526001600160a01b03861690637e348b7d906110859089908890600401612fe8565b600060405180830381600087803b15801561109f57600080fd5b505af11580156110b3573d6000803e3d6000fd5b5050600e546001600160a01b0388166000908152600c602052604090205414915061110d9050576001600160a01b0385166000908152600c602052604081208054869290611102908490613362565b92505081905561112a565b6001600160a01b0385166000908152600c60205260409020849055835b50846001600160a01b0316866001600160a01b03167fd3dba7b5565b16b7749db7d1938410a636e3c7a6ea46ed8ce7e259e19f2f3b9f8660405161116e91906132af565b60405180910390a35050600160005550505050565b6004546001600160a01b031633146111ad5760405162461bcd60e51b815260040161044b906131a5565b6009546000906111be57600061121c565b600980546111ce906001906133de565b815481106111ec57634e487b7160e01b600052603260045260246000fd5b90600052602060002090601091828204019190066002029054906101000a900461ffff16600161121c919061333c565b600980546001810182556000919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60108204018054600f9092166002026101000a61ffff81810219909316928416029190911790556040805160e0810182528481526001600160a01b038a166020808301919091528251601f8d0182900482028101820184528c8152939450909291830191908c908c9081908401838280828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092018290525093855250506103e86020808501919091526001604094850181905261ffff871684526008825292849020855181558582015193810180546001600160a01b0319166001600160a01b039095169490941790935592840151805192936113ab936002860193509101906129d9565b50606082015180516113c79160038401916020909101906129d9565b50608082015180516113e39160048401916020909101906129d9565b5060a08201516005909101805460c0909301511515620100000262ff00001961ffff90931661ffff19909416939093179190911691909117905560065482111561142d5760068290555b306001600160a01b03167fbcf8a46c68576cc4e52eb8fbc678b3ce3adbeadb33126980d791f827ccff411182604051611466919061328c565b60405180910390a2505050505050505050565b6001546001600160a01b031633146114a35760405162461bcd60e51b815260040161044b906131a5565b604051635800f04d60e11b81526001600160a01b0384169063b001e09a906114d19085908590600401612fe8565b602060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115239190612b08565b600380546001600160a01b0319166001600160a01b0392909216919091179055505050565b6004546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60095490565b600260005414156115a45760405162461bcd60e51b815260040161044b90613255565b60026000556004546001600160a01b031633146115d35760405162461bcd60e51b815260040161044b906131a5565b806115f05760405162461bcd60e51b815260040161044b9061316e565b6001600160a01b0382166116165760405162461bcd60e51b815260040161044b90613137565b6000826001600160a01b031663e5a6b10f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116899190612b08565b9050611697813385856127aa565b600e546001600160a01b0384166000908152600c6020526040902054146116eb576001600160a01b0383166000908152600c6020526040812080548492906116e0908490613362565b925050819055611708565b6001600160a01b0383166000908152600c60205260409020829055815b50604051635c96ae9960e11b81526001600160a01b0384169063b92d5d32906117379033908690600401612fe8565b600060405180830381600087803b15801561175157600080fd5b505af1158015611765573d6000803e3d6000fd5b505050506117716128af565b7f20815c9b51fae3c91e66fe01c2b0badeedd429309acfd33f29e4454b20b97e3f83836040516117a2929190612fe8565b60405180910390a15050600160005550565b6004546000906001600160a01b031633146117e15760405162461bcd60e51b815260040161044b906131a5565b600b54604051634f35e6d560e01b81526001600160a01b03871690634f35e6d59061181e908d908d908d908d9030908d908d908d90600401613001565b602060405180830381600087803b15801561183857600080fd5b505af115801561184c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118709190612b08565b915060008082116118825760006118d9565b600b61188f6001846133de565b815481106118ad57634e487b7160e01b600052603260045260246000fd5b90600052602060002090602091828204019190069054906101000a900460ff1660016118d9919061337a565b600b80546001810190915560208082047f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901805460ff808616601f9095166101000a8581029102199091161790556000918252600a90526040812080546001600160a01b0387166001600160a01b0319909116179055600d80549293508792909190611966908490613362565b9091555050600e546001600160a01b0384166000818152600c60205260408082209390935582516315e5a1e560e01b8152925191926315e5a1e5926004808301939282900301818387803b1580156119bd57600080fd5b505af11580156119d1573d6000803e3d6000fd5b50506040516001600160a01b03861692503091507f184d7691bf4a73930a21086fa1bdf0ee3075421531a60730288325fd5838021790600090a3505098975050505050505050565b6001546001600160a01b031681565b6002546001600160a01b031681565b6004546001600160a01b03163314611a615760405162461bcd60e51b815260040161044b906131a5565b60026000541415611a845760405162461bcd60e51b815260040161044b90613255565b60026000819055506000816001600160a01b031663e19d64d16040518163ffffffff1660e01b815260040160006040518083038186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b039190810190612c04565b905060005b8151811015611ba957826001600160a01b0316630e0e65d2838381518110611b4057634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401611b649190612f8b565b600060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b505050508080611ba190613460565b915050611b08565b50816001600160a01b03166311373f856040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b4657600080fd5b60086020526000908152604090208054600182015460028301805492936001600160a01b0390921692611c1790613425565b80601f0160208091040260200160405190810160405280929190818152602001828054611c4390613425565b8015611c905780601f10611c6557610100808354040283529160200191611c90565b820191906000526020600020905b815481529060010190602001808311611c7357829003601f168201915b505050505090806003018054611ca590613425565b80601f0160208091040260200160405190810160405280929190818152602001828054611cd190613425565b8015611d1e5780601f10611cf357610100808354040283529160200191611d1e565b820191906000526020600020905b815481529060010190602001808311611d0157829003601f168201915b505050505090806004018054611d3390613425565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5f90613425565b8015611dac5780601f10611d8157610100808354040283529160200191611dac565b820191906000526020600020905b815481529060010190602001808311611d8f57829003601f168201915b5050506005909301549192505061ffff81169060ff620100009091041687565b60026000541415611def5760405162461bcd60e51b815260040161044b90613255565b600260005560075415801590611e125750600654600754611e1090426133de565b115b611e2e5760405162461bcd60e51b815260040161044b906131a5565b6001600160a01b0381166000908152600c602052604090205415801590611e6f5750600e546001600160a01b0382166000908152600c602052604090205414155b611e8b5760405162461bcd60e51b815260040161044b906131dc565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611eba908690600401612f8b565b60206040518083038186803b158015611ed257600080fd5b505afa158015611ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f0a9190612e88565b905080611f295760405162461bcd60e51b815260040161044b9061316e565b60005b60095481101561206757600060098281548110611f5957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060108204015460035460405163bcd84a7160e01b8152600f9093166002026101000a90910461ffff1692506001600160a01b03169063bcd84a7190611fac90849060040161328c565b600060405180830381600087803b158015611fc657600080fd5b505af1158015611fda573d6000803e3d6000fd5b505050506000611feb868684612586565b6003546040516323c4859f60e21b81529192506001600160a01b031690638f12167c9061202090899086908690600401612fc3565b600060405180830381600087803b15801561203a57600080fd5b505af115801561204e573d6000803e3d6000fd5b505050505050808061205f90613460565b915050611f2c565b50604051635f6fbbd360e11b81526001600160a01b0383169063bedf77a690612094908690600401612f8b565b600060405180830381600087803b1580156120ae57600080fd5b505af11580156120c2573d6000803e3d6000fd5b50506040516001600160a01b038086169350861691507f3fdbe9ffcd54f2ab6b430c78a338bde8aefdc06f4720928defb03e50e9da853290600090a35050600160005550565b6004546001600160a01b031633146121325760405162461bcd60e51b815260040161044b906131a5565b600655565b6000806000836001600160a01b0316631feeb4ee6040518163ffffffff1660e01b815260040160606040518083038186803b15801561217557600080fd5b505afa158015612189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ad9190612ea0565b9250925092509193909250565b600080805b600b548110156122b5576000600a6000600b84815481106121f057634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820190205481516318160ddd60e01b815291516001600160a01b03909116935083926318160ddd9260048082019391829003018186803b15801561225d57600080fd5b505afa158015612271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122959190612e88565b61229f9084613362565b92505080806122ad90613460565b9150506121bf565b50905090565b60035460405163cfbff97d60e01b8152600091829182916001600160a01b03169063cfbff97d906122f090889060040161328c565b60206040518083038186803b15801561230857600080fd5b505afa15801561231c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123409190612e88565b600b54909150600160005b82811015612470576000600a6000600b848154811061237a57634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820181205482516318160ddd60e01b815292516001600160a01b039091169450909284926318160ddd9260048083019392829003018186803b1580156123e957600080fd5b505afa1580156123fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124219190612e88565b905061242d8187613362565b955083801561243b57508015155b8015612451575061244d6001866133de565b8314155b1561245b57600093505b5050808061246890613460565b91505061234b565b508061250357600360009054906101000a90046001600160a01b03166001600160a01b031663087d8d016040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156124c657600080fd5b505af11580156124da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124fe9190612e88565b612506565b60005b93506125128487613362565b83101594505050509250929050565b6040516301e51e9760e01b81526001600160a01b038216906301e51e979061254f9086908690600401612fe8565b600060405180830381600087803b15801561256957600080fd5b505af115801561257d573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166000908152600c602052604081205415806125c45750600e546001600160a01b0384166000908152600c6020526040902054145b806125cf5750600d54155b156125dc575060006127a3565b60035460405163cfbff97d60e01b81526000916001600160a01b03169063cfbff97d9061260d90869060040161328c565b60206040518083038186803b15801561262557600080fd5b505afa158015612639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265d9190612e88565b90506000846001600160a01b03166370a08231876040518263ffffffff1660e01b815260040161268d9190612f8b565b60206040518083038186803b1580156126a557600080fd5b505afa1580156126b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dd9190612e88565b600d546001600160a01b0387166000908152600c60205260408120549293509161270791906133bf565b90506000866001600160a01b031663bd30558e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561274457600080fd5b505afa158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c9190612e88565b61278684866133bf565b61279091906133bf565b905061279c828261339f565b9450505050505b9392505050565b600080856001600160a01b03166323b872dd8686866040516024016127d193929190612f9f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161281f9190612f6f565b6000604051808303816000865af19150503d806000811461285c576040519150601f19603f3d011682016040523d82523d6000602084013e612861565b606091505b509150915081801561288b57508051158061288b57508080602001905181019061288b9190612cc5565b6128a75760405162461bcd60e51b815260040161044b906130a3565b505050505050565b6000805b600b548110156129a9576000600a6000600b84815481106128e457634e487b7160e01b600052603260045260246000fd5b600091825260208083208183040154601f9092166101000a90910460ff16835282810193909352604091820190205481516318160ddd60e01b815291516001600160a01b03909116935083926318160ddd9260048082019391829003018186803b15801561295157600080fd5b505afa158015612965573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129899190612e88565b6129939084613362565b92505080806129a190613460565b9150506128b3565b507f000000000000000000000000000000000000000000000000000000000000000081106129d657426007555b50565b8280546129e590613425565b90600052602060002090601f016020900481019282612a075760008555612a4d565b82601f10612a2057805160ff1916838001178555612a4d565b82800160010185558215612a4d579182015b82811115612a4d578251825591602001919060010190612a32565b50612a59929150612a5d565b5090565b5b80821115612a595760008155600101612a5e565b8051612a7d816134a7565b919050565b60008083601f840112612a93578182fd5b50813567ffffffffffffffff811115612aaa578182fd5b602083019150836020828501011115612ac257600080fd5b9250929050565b803561ffff81168114612a7d57600080fd5b803560ff81168114612a7d57600080fd5b600060208284031215612afd578081fd5b81356127a3816134a7565b600060208284031215612b19578081fd5b81516127a3816134a7565b60008060408385031215612b36578081fd5b8235612b41816134a7565b91506020830135612b51816134a7565b809150509250929050565b600080600060608486031215612b70578081fd5b8335612b7b816134a7565b92506020840135612b8b816134a7565b929592945050506040919091013590565b600080600060608486031215612bb0578283fd5b8335612bbb816134a7565b9250612bc960208501612ac9565b9150604084013590509250925092565b60008060408385031215612beb578182fd5b8235612bf6816134a7565b946020939093013593505050565b60006020808385031215612c16578182fd5b825167ffffffffffffffff80821115612c2d578384fd5b818501915085601f830112612c40578384fd5b815181811115612c5257612c52613491565b83810260405185828201018181108582111715612c7157612c71613491565b604052828152858101935084860182860187018a1015612c8f578788fd5b8795505b83861015612cb857612ca481612a72565b855260019590950194938601938601612c93565b5098975050505050505050565b600060208284031215612cd6578081fd5b815180151581146127a3578182fd5b60008060008060008060008060a0898b031215612d00578384fd5b883567ffffffffffffffff80821115612d17578586fd5b612d238c838d01612a82565b909a50985060208b01359150612d38826134a7565b90965060408a01359080821115612d4d578586fd5b612d598c838d01612a82565b909750955060608b0135915080821115612d71578485fd5b50612d7e8b828c01612a82565b999c989b50969995989497949560800135949350505050565b60008060008060008060008060c0898b031215612db2578384fd5b883567ffffffffffffffff80821115612dc9578586fd5b612dd58c838d01612a82565b909a50985060208b0135915080821115612ded578586fd5b50612dfa8b828c01612a82565b9097509550506040890135612e0e816134a7565b93506060890135612e1e816134a7565b979a969950949793969295929450505060808201359160a0013590565b600060208284031215612e4c578081fd5b6127a382612ac9565b60008060408385031215612e67578081fd5b612bf683612ac9565b600060208284031215612e81578081fd5b5035919050565b600060208284031215612e99578081fd5b5051919050565b600080600060608486031215612eb4578081fd5b8351925060208401519150604084015190509250925092565b600060208284031215612ede578081fd5b6127a382612adb565b60008060408385031215612ef9578182fd5b612f0283612adb565b9150612f1060208401612adb565b90509250929050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612f5b8160208601602086016133f5565b601f01601f19169290920160200192915050565b60008251612f818184602087016133f5565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0393909316835261ffff919091166020830152604082015260600190565b6001600160a01b03929092168252602082015260400190565b600060c0825261301560c083018a8c612f19565b828103602084015261302881898b612f19565b6001600160a01b03978816604085015295909616606083015250608081019290925260a09091015295945050505050565b6000602082526127a36020830184612f43565b60208082526019908201527f556e6f52653a205269736b506f6f6c206e6f7420657869737400000000000000604082015260600190565b60208082526031908201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260408201527f616e7366657246726f6d206661696c6564000000000000000000000000000000606082015260800190565b60208082526018908201527f556e6f52653a205269736b506f6f6c206f766572666c6f770000000000000000604082015260600190565b60208082526013908201527f556e6f52653a205a45524f204164647265737300000000000000000000000000604082015260600190565b60208082526011908201527f556e6f52653a205a45524f2056616c7565000000000000000000000000000000604082015260600190565b60208082526010908201527f556e6f52653a20466f7262696464656e00000000000000000000000000000000604082015260600190565b60208082526022908201527f556e6f52653a205269736b506f6f6c206e6f74206578697374206f7220656d70604082015261747960f01b606082015260800190565b6020808252601c908201527f556e6f52653a204361706974616c206973206e6f7420656e6f75676800000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff91909116815260200190565b61ffff929092168252602082015260400190565b90815260200190565b60008882526001600160a01b038816602083015260e060408301526132e060e0830188612f43565b82810360608401526132f28188612f43565b905082810360808401526133068187612f43565b61ffff9590951660a0840152505090151560c09091015295945050505050565b9283526020830191909152604082015260600190565b600061ffff8083168185168083038211156133595761335961347b565b01949350505050565b600082198211156133755761337561347b565b500190565b600060ff821660ff84168060ff038211156133975761339761347b565b019392505050565b6000826133ba57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156133d9576133d961347b565b500290565b6000828210156133f0576133f061347b565b500390565b60005b838110156134105781810151838201526020016133f8565b8381111561341f576000848401525b50505050565b60028104600182168061343957607f821691505b6020821081141561345a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156134745761347461347b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146129d657600080fdfea2646970667358221220509857a93d43484b24851a57bc455fd4349e4e67f71e6b861aea0d9f93f7c3af64736f6c63430008000033a2646970667358221220a7cbecc7b7d063943fe699f2ee4eb8c9373332afd3d00a32015a27c4023a123d64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4187,
        "contract": "contracts/factories/CohortFactory.sol:CohortFactory",
        "label": "actuary",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}